<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Strong Opinions, Weekly Held</title><link>https://xn--izc.com/tags/programming/</link><description>Recent content in programming on Strong Opinions, Weekly Held</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Asanka Herath</copyright><lastBuildDate>Mon, 06 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://xn--izc.com/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Visualizing A Million People</title><link>https://xn--izc.com/blog/visualizing-people-2/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>https://xn--izc.com/blog/visualizing-people-2/</guid><description>This article was formerly published as Visualizing Internet Users. This version is more generalized and up-to-date.
What if you introduce a bug and/or a feature that pisses off a million people?
The scenario isn’t all that hard to imagine these days if you work at a big tech company or even a small one with a considerable user base. It seems a million users aren’t all that hard to reach these days.</description></item><item><title>Shannon Paper</title><link>https://xn--izc.com/blog/shannon-paper/</link><pubDate>Fri, 26 Mar 2021 16:14:20 -0400</pubDate><guid>https://xn--izc.com/blog/shannon-paper/</guid><description>Claude Shannon’s A mathematical theory of communication is an oft cited classic in information theory. In fact, as of this writing there are 84’411 citations and 139 versions of the article on Google Scholar.
Screenshot of Google Scholar showing citation count for Shannon’s paper Let’s dive in and try to tease apart the “why”s that are often overlooked when people build on top of the introduced theory. They are definitely things that I didn’t consider to be obvious without the benefit of reading the paper.</description></item><item><title>On WontFixing Bugs</title><link>https://xn--izc.com/blog/on-wontfixing-bugs/</link><pubDate>Tue, 02 Mar 2021 17:15:06 -0500</pubDate><guid>https://xn--izc.com/blog/on-wontfixing-bugs/</guid><description>This was partly inspired by a Tweet by a co-worker. The tweet is:
wontfix-ing valid bugs (that have been triaged as such) with bots because you haven&amp;#39;t been able to fix or prioritize them yet is kinda hostile to contributors, imho pic.twitter.com/faxtbpoiII
&amp;mdash; Mike Taylor (@miketaylr) March 2, 2021 For projects that are under-resourced but has heavy usage it is in fact quite normal to accumulate a large number of issue reports over time.</description></item><item><title>Visualizing Internet Users</title><link>https://xn--izc.com/blog/visualizing-people/</link><pubDate>Sat, 21 Nov 2020 11:37:53 -0500</pubDate><guid>https://xn--izc.com/blog/visualizing-people/</guid><description>What does 0.3%1 of internet users look like?
As of this writing the global population hovers around 7.7 billion according to the World Population Clock.2
Screenshot from census.gov showing the world population clock. The International Telecommunications Union “estimates that at the end of 2019, 53.6 per cent of the global population, or 4.1 billion people, are using the internet.”3
Screenshot from itu.int showing historical internet usage numbers as a percentage of the world population So a 0.</description></item><item><title>Things You Can Do With Neovim and Vscode That You Can't Do With Neovim Alone</title><link>https://xn--izc.com/blog/things-you-can-do-with-nvim-and-vscode/</link><pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate><guid>https://xn--izc.com/blog/things-you-can-do-with-nvim-and-vscode/</guid><description>This is the third time I’ve tried in earnest to switch to VSCode from Vim (or Neovim in my case) for reasons not all of which are relevant to this post. But I love Vim style modal editing and I’ve grown accustomed to some features that aren’t present or not well emulated in VSCodeVim.
Enter VSCode Neovim. I was intrigued by their claim to integrate Neovim instead of trying to emulate Vim.</description></item><item><title>Names for Name Conventions</title><link>https://xn--izc.com/blog/symbol-name-types/</link><pubDate>Mon, 24 Aug 2020 12:32:45 -0400</pubDate><guid>https://xn--izc.com/blog/symbol-name-types/</guid><description>Names I’ve seen used to refer to naming conventions:
snake_case, hacker_case, unix_hacker_style : Everything is lower case, though exceptions exist. E.g. HTTP_foo_bar. SCREAMING_SNAKE_CASE : Usually reserved for macros and constants. camelCase : The first letter is lowercase. PascalCase : The first letter is uppercase. kabob-case : Like snake_case, but uses dashes instead of underscores. Common for command-line options1, CSS styles, commands (e.g. git-receive-pack). While looking idly looking for details on this, I stumbled on this Medium post which is relevant.</description></item></channel></rss>