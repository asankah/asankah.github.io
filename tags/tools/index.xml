<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tools on Strong Opinions, Weekly Held</title><link>https://xn--izc.com/tags/tools/</link><description>Recent content in Tools on Strong Opinions, Weekly Held</description><generator>Hugo</generator><language>en-us</language><copyright>© Asanka Herath</copyright><lastBuildDate>Sat, 03 Feb 2024 15:41:05 -0500</lastBuildDate><atom:link href="https://xn--izc.com/tags/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Use Git hooks to automatically push after every commit</title><link>https://xn--izc.com/posts/git-autopush/</link><pubDate>Tue, 05 Jul 2022 16:15:23 -0400</pubDate><guid>https://xn--izc.com/posts/git-autopush/</guid><description>During before and after various Git operations, Git invokes special
hooks that can be used execute custom scripts. This article explains how
to use them to automatically push to an upstream repository every time
you make a commit to a local repo.</description></item><item><title>Markdown should be readble without knowing Markdown</title><link>https://xn--izc.com/posts/mark-goes-up-and-down/</link><pubDate>Tue, 05 Apr 2022 13:02:12 -0400</pubDate><guid>https://xn--izc.com/posts/mark-goes-up-and-down/</guid><description>Markdown started out as a way to write text files that could also be machine parsed and rendered into a higher fidelity format.
To quote from the Philosophy:
Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions.
This particular aspect of the format wasn’t maintained very well. Immediately following the “Philosophy” section is “Inline HTML” which contradicts the “without looking like it’s been marked up” requirement.</description></item><item><title>Quickly grab a snapshot of your reMarkable tablet</title><link>https://xn--izc.com/posts/grab-diagram-workflow-re2/</link><pubDate>Thu, 06 Jan 2022 00:00:00 -0500</pubDate><guid>https://xn--izc.com/posts/grab-diagram-workflow-re2/</guid><description>How to bind a hotkey to grab a snapshot of your reMarkable display
and copy it to the clipboard on a Mac.</description></item><item><title>Things You Can Do With Neovim and Vscode That You Can't Do With Neovim Alone</title><link>https://xn--izc.com/posts/things-you-can-do-with-nvim-and-vscode/</link><pubDate>Sat, 19 Sep 2020 00:00:00 -0400</pubDate><guid>https://xn--izc.com/posts/things-you-can-do-with-nvim-and-vscode/</guid><description>This is the third time I’ve tried in earnest to switch to VSCode from Vim (or Neovim in my case) for reasons not all of which are relevant to this post. But I love Vim style modal editing and I’ve grown accustomed to some features that aren’t present or not well emulated in VSCodeVim.
Enter VSCode Neovim. I was intrigued by their claim to integrate Neovim instead of trying to emulate Vim.</description></item><item><title>Vim: Use Drop Not Edit, SBuffer Not Buffer</title><link>https://xn--izc.com/posts/use-drop-not-edit/</link><pubDate>Tue, 07 Jul 2020 12:02:20 -0400</pubDate><guid>https://xn--izc.com/posts/use-drop-not-edit/</guid><description>I’m going to assume you are a Vim user.
Say you have a several windows open in Vim and you want to edit another file. Using :edit works if you want to open the file in the current window unconditionally.
But that’s often not what you want. If you have the same file open in another window, then the most efficient and least disruptive thing to do is to switch to that window.</description></item><item><title>Easier CLI for ad-hoc Ansible tasks and playbooks</title><link>https://xn--izc.com/posts/ansible-cli-sugar/</link><pubDate>Mon, 01 Jun 2020 00:00:00 -0400</pubDate><guid>https://xn--izc.com/posts/ansible-cli-sugar/</guid><description>Encode the host and group names into the name of a wrapper script for
quick ad-hoc invocation of Ansible tasks and playbooks.</description></item></channel></rss>